#include <iostream>
#include <stdlib.h>
#include <time.h>
#include "../include/algorithm.h"

using namespace std;

/******************************************************
 * In your algorithm, you can just use the the funcitons
 * listed by TA to get the board information.(functions
 * 1. ~ 4. are listed in next block)
 *
 * The STL library functions is not allowed to use.
******************************************************/

/*************************************************************************
 * 1. int board.get_orbs_num(int row_index, int col_index)
 * 2. int board.get_capacity(int row_index, int col_index)
 * 3. char board.get_cell_color(int row_index, int col_index)
 * 4. void board.print_current_board(int row_index, int col_index, int round)
 *
 * 1. The function that return the number of orbs in cell(row, col)
 * 2. The function that return the orb capacity of the cell(row, col)
 * 3. The function that return the color fo the cell(row, col)
 * 4. The function that print out the current board statement
*************************************************************************/


void algorithm_A(Board board, Player player, int index[]){
int color = player.get_color();
for (int i=0;i<5;i++)
{
    for(int j=0;j<6;j++)
    {
        if(board.get_cell_color(i,j) == color || board.get_cell_color(i,j) == 'w')
        {
            if(board.get_orbs_num(i,j)==board.get_capacity(i,j)-1)
            {
                if((board.get_cell_color(i-1,j) != color &&board.get_orbs_num(i-1,j)==board.get_capacity(i-1,j)-1)||(board.get_cell_color(i+1,j) != color &&board.get_orbs_num(i+1,j)==board.get_capacity(i+1,j)-1)|| (board.get_cell_color(i,j-1) != color &&board.get_orbs_num(i,j-1)==board.get_capacity(i,j-1)-1)||(board.get_cell_color(i,j+1) != color &&board.get_orbs_num(i,j+1)==board.get_capacity(i,j+1)-1))
                    {
                        index[0] = i;
                        index[1] = j;
                        return;
                    }
            }
        }
    }
}
for (int i=0;i<5;i++)
{
    for(int j=0;j<6;j++)
    {
        if (board.get_capacity(i,j)==2&&board.get_cell_color(i,j) == 'w')
        {
                index[0] = i;
                index[1] = j;
                return;
        }
    }
}
for (int i=0;i<5;i++)
{
    for(int j=0;j<6;j++)
    {
        if (board.get_cell_color(i,j) == color||board.get_cell_color(i,j) == 'w')
        {
            if(board.get_orbs_num(i,j)==board.get_capacity(i,j)-3)
            {
                index[0] = i;
                index[1] = j;
                return;
            }
        }
    }
}
for (int i=0;i<5;i++)
{
    for(int j=0;j<6;j++)
    {
        if (board.get_cell_color(i,j) == 'w')
        {
            index[0] = i;
            index[1] = j;
            return;
        }
    }
}
for (int i=0;i<5;i++)
{
    for(int j=0;j<6;j++)
    {
        if (board.get_cell_color(i,j) == color)
        {
            index[0] = i;
            index[1] = j;
            return;
        }
    }
}

}
